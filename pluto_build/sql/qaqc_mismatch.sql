-- DELETE FROM qaqc_mismatch 
-- WHERE pair = :'VERSION'||' - '||:'VERSION_PREV' 
-- AND CONDO::boolean = :CONDO
-- AND MAPPED::boolean = :MAPPED;
DROP TABLE IF EXISTS qaqc_mismatch;
-- CREATE TABLE qaqc_mismatch (
--     -- pair varchar,
--     -- condo varchar,
--     -- mapped varchar,
--     total numeric,
--     borough numeric,
--     block numeric,
--     lot numeric
--     -- cd numeric 
-- );

-- INSERT INTO qaqc_mismatch (
SELECT
    -- :'VERSION'||' - '||:'VERSION_PREV' as pair, 
	-- :CONDO as condo,
    -- :MAPPED as mapped,
    count(*) as total,
    count(*) FILTER (WHERE a.borough IS DISTINCT FROM b.borough) as borough,
    count(*) FILTER (WHERE a.block::varchar IS DISTINCT FROM b.block::varchar) as block,
    count(*) FILTER (WHERE a.lot::varchar IS DISTINCT FROM b.lot::varchar) as lot,
    count(*) FILTER (WHERE a.cd::varchar IS DISTINCT FROM b.cd::varchar) as cd,
    count(*) FILTER (WHERE a.ct2010::varchar IS DISTINCT FROM b.ct2010::varchar) as ct2010,
    count(*) FILTER (WHERE a.cb2010 IS DISTINCT FROM b.cb2010) as cb2010,
    count(*) FILTER (WHERE a.schooldist IS DISTINCT FROM b.schooldist) as schooldist,
    count(*) FILTER (WHERE a.council::varchar IS DISTINCT FROM b.council::varchar) as council,
    count(*) FILTER (WHERE a.zipcode::varchar IS DISTINCT FROM b.zipcode::varchar) as zipcode,
    count(*) FILTER (WHERE a.firecomp::varchar IS DISTINCT FROM b.firecomp::varchar) as firecomp,
    count(*) FILTER (WHERE a.policeprct::varchar IS DISTINCT FROM b.policeprct::varchar) as policeprct,
    count(*) FILTER (WHERE a.healtharea::varchar IS DISTINCT FROM b.healtharea::varchar) as healtharea,
    count(*) FILTER (WHERE a.sanitboro::varchar IS DISTINCT FROM b.sanitboro::varchar) as sanitboro,
    count(*) FILTER (WHERE a.sanitsub::varchar IS DISTINCT FROM b.sanitsub::varchar) as sanitsub,
    count(*) FILTER (WHERE trim(a.address) IS DISTINCT FROM trim(b.address)) as address,
    count(*) FILTER (WHERE a.zonedist1 IS DISTINCT FROM b.zonedist1) as zonedist1,
    count(*) FILTER (WHERE a.zonedist2 IS DISTINCT FROM b.zonedist2) as zonedist2,
    count(*) FILTER (WHERE a.zonedist3 IS DISTINCT FROM b.zonedist3) as zonedist3,
    count(*) FILTER (WHERE a.zonedist4 IS DISTINCT FROM b.zonedist4) as zonedist4,
    count(*) FILTER (WHERE a.overlay1 IS DISTINCT FROM b.overlay1) as overlay1,
    count(*) FILTER (WHERE a.overlay2 IS DISTINCT FROM b.overlay2) as overlay2,
    count(*) FILTER (WHERE a.spdist1 IS DISTINCT FROM b.spdist1) as spdist1,
    count(*) FILTER (WHERE a.spdist2 IS DISTINCT FROM b.spdist2) as spdist2,
    count(*) FILTER (WHERE a.spdist3 IS DISTINCT FROM b.spdist3) as spdist3,
    count(*) FILTER (WHERE a.ltdheight IS DISTINCT FROM b.ltdheight) as ltdheight,
    count(*) FILTER (WHERE a.splitzone IS DISTINCT FROM b.splitzone) as splitzone,
    count(*) FILTER (WHERE a.bldgclass IS DISTINCT FROM b.bldgclass) as bldgclass,
    count(*) FILTER (WHERE a.landuse IS DISTINCT FROM b.landuse) as landuse,
    count(*) FILTER (WHERE a.easements::numeric IS DISTINCT FROM b.easements::numeric) as easements,
    count(*) FILTER (WHERE a.ownertype IS DISTINCT FROM b.ownertype) as ownertype,
    count(*) FILTER (WHERE a.ownername IS DISTINCT FROM b.ownername) as ownername,
    count(*) FILTER (WHERE abs(a.lotarea::int - b.lotarea::int)>=5 OR 
        ((a.lotarea IS NULL)::int + (b.lotarea IS NULL)::int) = 1) as lotarea,
    count(nullif(abs(a.bldgarea::numeric-b.bldgarea::numeric) <5, true)) as bldgarea,
    count(nullif(abs(a.comarea::numeric-b.comarea::numeric) <5, true)) as comarea,
    count(nullif(abs(a.resarea::numeric-b.resarea::numeric) <5, true)) as resarea,
    count(nullif(abs(a.officearea::numeric-b.officearea::numeric) <5, true)) as officearea,
    count(nullif(abs(a.retailarea::numeric-b.retailarea::numeric) <5, true)) as retailarea,
    count(nullif(abs(a.garagearea::numeric-b.garagearea::numeric) <5, true)) as garagearea,
    count(nullif(abs(a.strgearea::numeric-b.strgearea::numeric) <5, true)) as strgearea,
    count(nullif(abs(a.factryarea::numeric-b.factryarea::numeric) <5, true)) as factryarea,
    count(nullif(abs(a.otherarea::numeric-b.otherarea::numeric) <5, true)) as otherarea,
    count(*) FILTER (WHERE a.areasource IS DISTINCT FROM b.areasource) as areasource,
    count(nullif(a.numbldgs::numeric = b.numbldgs::numeric, true)) as numbldgs,
    count(nullif(a.numfloors::numeric = b.numfloors::numeric, true)) as numfloors,
    count(nullif(a.unitsres::numeric = b.unitsres::numeric, true)) as unitsres,
    count(nullif(a.unitstotal::numeric = b.unitstotal::numeric, true)) as unitstotal,
    count(nullif(abs(a.lotfront::numeric-b.lotfront::numeric) <5, true)) as lotfront,
    count(nullif(abs(a.lotdepth::numeric-b.lotdepth::numeric) <5, true)) as lotdepth,
    count(nullif(abs(a.bldgfront::numeric-b.bldgfront::numeric) <5, true)) as bldgfront,
    count(nullif(abs(a.bldgdepth::numeric-b.bldgdepth::numeric) <5, true)) as bldgdepth,
    count(nullif(a.ext = b.ext, true)) as ext,
    count(nullif(a.proxcode = b.proxcode, true)) as proxcode,
    count(nullif(a.irrlotcode = b.irrlotcode, true)) as irrlotcode,
    count(nullif(a.lottype = b.lottype, true)) as lottype,
    count(nullif(a.bsmtcode = b.bsmtcode, true)) as bsmtcode,
    count(nullif(abs(a.assessland::numeric-b.assessland::numeric) <10, true)) as assessland,
    count(nullif(abs(a.assesstot::numeric-b.assesstot::numeric) <10, true)) as assesstot,
    count(nullif(abs(a.exempttot::numeric-b.exempttot::numeric) <10, true)) as exempttot,
    count(nullif(a.yearbuilt::numeric = b.yearbuilt::numeric, true)) as yearbuilt,
    count(nullif(a.yearalter1::numeric = b.yearalter1::numeric, true)) as yearalter1,
    count(nullif(a.yearalter2::numeric = b.yearalter2::numeric, true)) as yearalter2,
    count(nullif(a.histdist = b.histdist, true)) as histdist,
    count(nullif(a.landmark = b.landmark, true)) as landmark,
    count(nullif(a.builtfar::double precision = b.builtfar::double precision, true)) as builtfar,
    count(nullif(a.residfar::double precision = b.residfar::double precision, true)) as residfar,
    count(nullif(a.commfar::double precision = b.commfar::double precision, true)) as commfar,
    count(nullif(a.facilfar::double precision = b.facilfar::double precision, true)) as facilfar,
    count(nullif(a.borocode::numeric = b.borocode::numeric, true)) as borocode,
    count(nullif(a.bbl::double precision = b.bbl::double precision, true)) as bbl,
    count(nullif(a.condono::numeric = b.condono::numeric, true)) as condono,
    count(nullif(a.tract2010 = b.tract2010, true)) as tract2010,
    count(nullif(abs(a.xcoord::numeric-b.xcoord::numeric) <1, true)) as xcoord,
    count(nullif(abs(a.ycoord::numeric-b.ycoord::numeric) <1, true)) as ycoord,
    count(nullif(abs(a.latitude::numeric-b.latitude::numeric) <0.0001, true)) as latitude,
    count(nullif(abs(a.longitude::numeric-b.longitude::numeric) <0.0001, true)) as longitude,
    count(nullif(a.zonemap = b.zonemap, true)) as zonemap,
    count(nullif(a.zmcode = b.zmcode, true)) as zmcode,
    count(nullif(a.sanborn = b.sanborn, true)) as sanborn,
    count(nullif(a.taxmap = b.taxmap, true)) as taxmap,
    count(nullif(a.edesignum = b.edesignum, true)) as edesignum,
    count(nullif(a.appbbl::double precision = b.appbbl::double precision, true)) as appbbl,
    count(nullif(a.appdate = b.appdate, true)) as appdate,
    count(nullif(a.plutomapid = b.plutomapid, true)) as plutomapid,
    count(nullif(a.sanitdistrict = b.sanitdistrict, true)) as sanitdistrict,
    count(nullif(a.healthcenterdistrict::numeric = b.healthcenterdistrict::numeric, true)) as healthcenterdistrict,
    count(nullif(a.firm07_flag = b.firm07_flag, true)) as firm07_flag,
    count(nullif(a.pfirm15_flag = b.pfirm15_flag, true)) as pfirm15_flag
    INTO qaqc_mismatch
    FROM export_pluto a
INNER JOIN dcp_pluto b
ON ROUND(a.bbl::float):: bigint = ROUND(b.bbl::float)::bigint;